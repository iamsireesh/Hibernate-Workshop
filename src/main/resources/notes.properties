#Annotations

#Using the Hibernate API
1. Create a Session factory 
2. Create a session(s) from session factory
3. Use the session to save the model objects

@Entity: This annotation marks class as an Entity class.
@Id: This annotation marks field as primary key.
@Entity(name="name_of_the table") : To specify a name instead of class name as a table name.
@Column : This annotation is used to specify the column name and some more column properties
@Column( ColumnDefinition
         insertable
         length
         nullable
         name
         pricision
         scale
         table
         unique
         updateable
#The above two annotations are minmum mandatory annotations
#Table Annotation and It's Parameter Description
--------------------------------------------------------------------------------------------
#Class Modifiers	
@Table	@Table(name="")	

Using this annotation we can mark the database table name for the specified entity	This annotation will be placed on top of the class definition
#Properties	
#DataType #parameter         #Description
String	  catalog	         Descibes the table (not clear about this)	
Array	  uniqueConstraints	 Array of @UniqueConstraint annotations. It allows to hint the SchemaTool to generate a database unique constraint on the specified table columns	
Array	  indexes	         indexes: Array of @Index annotations,It allows to hint the SchemaTool to generate a database indexes on the specified table columns
-----------------------------------------------------------------------------------------------	

------------------------------------------------------------------------------------------------
Column Annotations
If we apply insertable=false and nullable=false on single property, It will raise constraint voilation exception at the run time
#Error messages for wrong data
Data too long for column 'password' at row 1
nullable test: not-null property references a null
Duplicate entry 'si@gmail.com' for key :unique test
Not clear about columnDefinition, scale and precision parameters as these are related to DDL
------------------------------------------------------------------------------------------------------------
More Annotations
------------------------------------------------------------------------------------------------------------
@Basic		                    The use of the Basic annotation is optional for persistent fields and properties of these types. If the Basicannotation is not specified for such a field or property, the default values of the Basic annotation will apply.
	     fetch=FetchType.LAZY	Defines whether the value of the field or property should be lazily loaded or must be eagerly fetched. The EAGER strategy is a requirement on the persistence provider runtime that the value must be eagerly fetched. The LAZY strategy is a hint to the persistence provider runtime. If not specified, defaults to EAGER.
	     fetch=FetchType.EAGER
	     	
boolean	 optional	            Defines whether the value of the field or property may be null. This is a hint and is disregarded for primitive types; it may be used in schema generation. If not specified, defaults to true.

@Transient		                If we don't want to persist the property then we will use this annotation
@Temporal		                This annotation must be specified for persistent fields or properties of type java.util.Date and java.util.Calendar. It may only be specified for fields or properties of these types. by default it will store time stamp without time zone
	TemporalType.DATE	        To store only date without time (eg: DOB)
	TemporalType.TIME	        To store only time excluding date
	TemporalType.TIMESTAMP	    Default; To store date and time (if we doesn't specify, this will be applied)
		                        
@Lob 	                        To store large amount of data
                                To store huge amount of data @Lob= CLOB or BLOB
